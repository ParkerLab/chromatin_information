#! /usr/bin/env python
#
# The Parker Lab (theparkerlab.org)
# University of Michigan, Ann Arbor
#


import itertools
import os
import sys
import functools


# GENERIC DATA

ORGANISMS = {
    'rn4': 'rat',
    'rn5': 'rat',
    'mm9': 'mouse',
    'mm10': 'mouse',
    'hg19': 'human',
    'hg38': 'human'
}

AUTOSOMAL_REFERENCES = {
    'hg19': ['chr{}'.format(i) for i in range(1, 23)],
    'hg38': ['chr{}'.format(i) for i in range(1, 23)],
    'mm9': ['chr{}'.format(i) for i in range(1, 20)],
    'mm10': ['chr{}'.format(i) for i in range(1, 20)],
    'rn4': ['chr{}'.format(i) for i in range(1, 21)],
    'rn5': ['chr{}'.format(i) for i in range(1, 21)]
}

MACS2_GENOME_SIZE = {
    'rn4': 'mm',
    'rn5': 'mm',
    'mm9': 'mm',
    'mm10': 'mm',
    'hg19': 'hs',
    'hg38': 'hs'
}


# set path generator function
prefix_results = functools.partial(os.path.join, config['results'])

# target directories; relative to root
FASTQC_DIR = prefix_results('fastqc')
TRIM_DIR = prefix_results('trim')
BWA_DIR = prefix_results('bwa')
MERGE_DIR = prefix_results('merge_readgroups')
MD_DIR = prefix_results('mark_duplicates')
PRUNE_DIR = prefix_results('prune')
MACS2_DIR = prefix_results('macs2')
ATAQV_DIR = prefix_results('ataqv')
MKARV_DIR = prefix_results('mkarv')
VSIGNAL_DIR = prefix_results('vplots')

# Subsample dirs
SUBSAMPLE_DIR = prefix_results('subsampled_bam')
MACS2_SUB_DIR = prefix_results('subsampled_macs2')

# logs and other stuff
LOG_DIR = prefix_results('logs')
VERSION_DIR = prefix_results('versions')


# Helper functions

def iterate_all_libraries():
    for library in sorted(config['libraries'].keys()):
        yield library


def iterate_library_readgroups(library):
    for rg in sorted(config['libraries'][library]['readgroups'].keys()):
        yield rg


def readgroup_to_library(readgroup):
    for library in iterate_all_libraries():
        for library_readgroup in iterate_library_readgroups(library):
            if readgroup == library_readgroup:
                return library


def iterate_all_readgroups():
    for library in iterate_all_libraries():
        for readgroup in iterate_library_readgroups(library):
            yield readgroup


def list_readgroup_fastqs(readgroup):
    library = readgroup_to_library(readgroup)
    return config['libraries'][library]['readgroups'][readgroup]


def iterate_all_fastqs():
    for readgroup in iterate_all_readgroups():
        for fastq in list_readgroup_fastqs(readgroup):
            yield fastq


def fastq_basename_to_fastq(fastq_basename):
    for fastq in iterate_all_fastqs():
        if fastq_basename == os.path.basename(fastq):
            return fastq
    sys.stderr.write(
        'ERROR: could not find fastq corresponding to {}; exiting.\n'
        .format(fastq_basename))
    sys.exit()


def fastq_to_trimmed_fastq(fastq):
    trimmed_fastq_basename = os.path.basename(
        fastq).replace('.fastq', '.trimmed.fastq.gz')
    return os.path.join(TRIM_DIR, trimmed_fastq_basename)


def get_genome(library):
    return config['libraries'][library]['genome']


def get_organism(genome):
    return ORGANISMS[genome]


def get_bwa_index(genome):
    return config['bwa_index'][genome]


def get_autosomes(genome):
    return AUTOSOMAL_REFERENCES[genome]


def get_tss(genome):
    return config['tss'][genome]


def get_whitelists(genome):
    if genome in config['whitelist']:
        return config['whitelist'][genome]
    else:
        return None


def get_blacklists(genome):
    if genome in config['blacklist']:
        return config['blacklist'][genome]
    else:
        return None


def mappability_filter(bed, genome):
    whitelists = get_whitelists(genome) or []
    blacklists = get_blacklists(genome) or []

    whitelist_template = 'intersectBed -a {} -b {} -f 1.0'
    whitelist_chain = ' | '.join([whitelist_template.format('stdin', x)
                                  for x in whitelists])

    blacklist_template = 'intersectBed -a {} -b {} -v'
    blacklist_chain = ' | '.join(
        [blacklist_template.format('stdin', x) for x in blacklists])

    command = ' | '.join([x for x in ['cat {bed}'.format(
        **locals()), whitelist_chain, blacklist_chain] if x != ''])
    return command


# Now the pipeline itself

rule all:
    input:
        # fastqc output
        [os.path.join(FASTQC_DIR, '{}_fastqc.zip'.format(os.path.basename(
            fastq).replace('.fastq', ''))) for fastq in iterate_all_fastqs()],
        # blacklist-filtered peak files
        [os.path.join(MACS2_DIR, '{}_peaks.broadPeak.noblacklist'.format(x))
         for x in config['libraries']],
        [os.path.join(MACS2_DIR, '{}_peaks.narrowPeak.noblacklist'.format(x))
         for x in config['libraries']],
        # ataqv output
        [os.path.join(ATAQV_DIR, '{}.ataqv.json.gz'.format(x))
         for x in config['libraries']],
        # v-plots output
        [os.path.join(VSIGNAL_DIR, '{}.png'.format(x))
         for x in config['libraries']],

        #
        # software versions
        #
        os.path.join(VERSION_DIR, 'fastqc_version.txt'),
        os.path.join(VERSION_DIR, 'cta_version.txt'),
        os.path.join(VERSION_DIR, 'bwa_version.txt'),
        os.path.join(VERSION_DIR, 'picard_version.txt'),
        os.path.join(VERSION_DIR, 'samtools_version.txt'),
        os.path.join(VERSION_DIR, 'macs2_version.txt'),
        os.path.join(VERSION_DIR, 'bedtools_version.txt'),
        os.path.join(VERSION_DIR, 'ataqv_version.txt')

rule fastqc:
    input:
        lambda wildcards: fastq_basename_to_fastq(
            '{}.fastq'.format(wildcards.fastq_basename))
    output:
        os.path.join(FASTQC_DIR, '{fastq_basename}_fastqc.zip')
    params:
        outdir = FASTQC_DIR
    log:
        os.path.join(LOG_DIR, 'fastqc.{fastq_basename}.log')
    shell:
        'fastqc {input} -o {params.outdir} &> {log}'


rule trim:
    input:
        first = lambda wildcards: fastq_basename_to_fastq(
            '{}.1.fastq'.format(wildcards.fastq_basename)),
        second = lambda wildcards: fastq_basename_to_fastq(
            '{}.2.fastq'.format(wildcards.fastq_basename))
    output:
        first = os.path.join(TRIM_DIR, '{fastq_basename}.1.trimmed.fastq.gz'),
        second = os.path.join(TRIM_DIR, '{fastq_basename}.2.trimmed.fastq.gz')
    resources:
        io_limit = 1
    shell:
        """
        ionice -c2 -n7 cta {input.first} {input.second} \
            {output.first} {output.second}
        """


rule map:
    input:
        first = lambda wildcards: fastq_to_trimmed_fastq(
            list_readgroup_fastqs(wildcards.readgroup)[0]),
        second = lambda wildcards: fastq_to_trimmed_fastq(
            list_readgroup_fastqs(wildcards.readgroup)[1]),
        fasta = lambda wildcards: get_bwa_index(get_genome(wildcards.library))
    output:
        os.path.join(BWA_DIR, '{library}______{readgroup}.bam')
    params:
        sort_tmp = os.path.join(
            BWA_DIR, '{library}______{readgroup}.sort.tmp'),
        rg = '\\t'.join(['@RG', 'ID:{}'.format('{readgroup}'),
                         'LB:{}'.format('{library}')])
    threads:
        4
    resources:
        mem_mb = lambda wildcards, attempt: attempt * 15000 + 15000
    log:
        bwa = os.path.join(LOG_DIR, 'map.bwa.{library}______{readgroup}.log'),
        samtools = os.path.join(
            LOG_DIR, 'map.samtools.{library}______{readgroup}.log')
    shell:
        """
        ionice -c2 -n7 bwa mem -I 200,200,5000 -M -R '{params.rg}' \
            -t {threads} {input.fasta} {input.first} {input.second} 2> \
            {log.bwa} | samtools sort -m 1g -@ {threads} -O bam \
            -T {params.sort_tmp} -o {output} - 2> {log.samtools}
        """


rule merge:
    input:
        lambda wildcards: [os.path.join(
            BWA_DIR, '{}______{}.bam'.format(wildcards.library, readgroup)
        ) for readgroup in
            iterate_library_readgroups(wildcards.library)]
    output:
        bam = os.path.join(MERGE_DIR, '{library}.bam'),
        bam_index = os.path.join(MERGE_DIR, '{library}.bam.bai'),
    params:
        unsorted_merged_bam = os.path.join(
            MERGE_DIR, '{library}.unsorted.bam'),
        sort_tmp_prefix = os.path.join(MERGE_DIR, '{library}.sort')
    resources:
        io_limit = 1
    shell:
        """
        ionice -c2 -n7 samtools merge {params.unsorted_merged_bam} {input}
        ionice -c2 -n7 samtools sort -m 1G -O bam -T {params.sort_tmp_prefix} \
            -o {output.bam} {params.unsorted_merged_bam}
            samtools index {output.bam}
        rm {params.unsorted_merged_bam}
        """


rule mark_duplicates:
    input:
        bam = os.path.join(MERGE_DIR, '{library}.bam'),
        bam_index = os.path.join(MERGE_DIR, '{library}.bam.bai')
    output:
        bam = os.path.join(MD_DIR, '{library}.md.bam'),
        bam_index = os.path.join(MD_DIR, '{library}.md.bam.bai')
    params:
        metrics = os.path.join(MD_DIR, '{library}.metrics'),
        tmp_dir = MD_DIR
    shell:
        """
        ionice -c2 -n7 picard -m 4g MarkDuplicates I={input.bam} \
            O={output.bam} ASSUME_SORTED=true METRICS_FILE={params.metrics} \
            VALIDATION_STRINGENCY=LENIENT TMP_DIR={params.tmp_dir}
        samtools index {output.bam}"""


rule prune:
    input:
        bam = os.path.join(MD_DIR, '{library}.md.bam'),
        bam_index = os.path.join(MD_DIR, '{library}.md.bam.bai')
    output:
        bam = os.path.join(PRUNE_DIR, '{library}.pruned.bam'),
        bam_index = os.path.join(PRUNE_DIR, '{library}.pruned.bam.bai')
    params:
        tmp_dir = MD_DIR,
        mapq = 30,
        autosomes = lambda wildcards: get_autosomes(
            get_genome('{}'.format(wildcards.library)))
    resources:
        io_limit = 1
    shell:
        """
        ionice -c2 -n7 samtools view -b -h -f 3 -F 4 -F 8 -F 256 -F 1024 \
            -F 2048 -q {params.mapq} {input.bam} \
            {params.autosomes} > {output.bam}
        samtools index {output.bam}
        """


rule peaks:
    input:
        os.path.join(PRUNE_DIR, '{library}.pruned.bam')
    output:
        os.path.join(MACS2_DIR, '{library}_peaks.broadPeak')
    params:
        name = '{library}',
        genome_size = lambda wildcards: MACS2_GENOME_SIZE[
            get_genome(wildcards.library)],
        stderr_location = os.path.join(MACS2_DIR, '{library}.macs2.out'),
        outdir = MACS2_DIR
    shell:
        """
        ionice -c2 -n7 macs2 callpeak -t {input} --outdir {params.outdir} \
            -f BAM -n {params.name} -g {params.genome_size} \
            --nomodel --shift -100 --seed 762873 --extsize 200 -B --broad \
            --keep-dup all &> {params.stderr_location}
        """

rule narrow_peaks:
    input:
        os.path.join(PRUNE_DIR, '{library}.pruned.bam')
    output:
        os.path.join(MACS2_DIR, '{library}_peaks.narrowPeak')
    params:
        name = '{library}',
        genome_size = lambda wildcards: MACS2_GENOME_SIZE[
            get_genome(wildcards.library)],
        stderr_location = os.path.join(
            MACS2_DIR, '{library}.macs2_narrow.out'),
        outdir = MACS2_DIR
    shell:
        """
        ionice -c2 -n7 macs2 callpeak -t {input} --outdir {params.outdir} \
            -f BAM -n {params.name} -g {params.genome_size} \
            --nomodel --shift -100 --seed 762873 --extsize 200 -B \
            --keep-dup all &> {params.stderr_location}
        """


rule blacklist_filter:
    input:
        os.path.join(MACS2_DIR, '{library}_peaks.broadPeak')
    output:
        os.path.join(MACS2_DIR, '{library}_peaks.broadPeak.noblacklist')
    params:
        filter_cmd = lambda wildcards: mappability_filter(os.path.join(
            MACS2_DIR,
            '{}_peaks.broadPeak'.format(wildcards.library)),
            get_genome(wildcards.library)
        )
    resources:
        io_limit = 1
    shell:
        """
        ionice -c2 -n7 {params.filter_cmd} > {output}
        """

rule blacklist_filter_narrow:
    input:
        os.path.join(MACS2_DIR, '{library}_peaks.narrowPeak')
    output:
        os.path.join(MACS2_DIR, '{library}_peaks.narrowPeak.noblacklist')
    params:
        filter_cmd = lambda wildcards: mappability_filter(os.path.join(
            MACS2_DIR,
            '{}_peaks.narrowPeak'.format(wildcards.library)),
            get_genome(wildcards.library)
        )
    resources:
        io_limit = 1
    shell:
        """
        ionice -c2 -n7 {params.filter_cmd} > {output}
        """


rule ataqv:
    input:
        md_bam = os.path.join(MD_DIR, '{library}.md.bam'),
        peaks = os.path.join(MACS2_DIR, '{library}_peaks.broadPeak')
    output:
        metrics = os.path.join(ATAQV_DIR, '{library}.ataqv.json.gz'),
        stdout_destination = os.path.join(ATAQV_DIR, '{library}.ataqv.out')
    params:
        name = '{library}',
        description = '{library}',  # this should really be {description}
        organism = lambda wildcards: get_organism(
            get_genome(wildcards.library)),
        tss_file = lambda wildcards: get_tss(get_genome(wildcards.library)),
        excluded_regions_option = lambda wildcards: ' '.join(
            ['--excluded-region-file {}'.format(x)
             for x in get_blacklists(get_genome(wildcards.library))]) if \
            get_blacklists(get_genome(wildcards.library)) is not None else ''
    shell:
        """
        ionice -c2 -n7 ataqv --peak-file {input.peaks} \
            --name {params.description} --metrics-file {output.metrics} \
            {params.excluded_regions_option} --tss-file {params.tss_file} \
            --ignore-read-groups {params.organism} {input.md_bam} \
            > {output.stdout_destination}
        """

rule vsignal:
    input:
        os.path.join(PRUNE_DIR, '{library}.pruned.bam')
    output:
        vsignal = os.path.join(VSIGNAL_DIR, '{library}.vsignal.gz'),
        vplot = os.path.join(VSIGNAL_DIR, '{library}.png')
    threads:
        4
    params:
        handle = os.path.join(VSIGNAL_DIR, '{library}'),
        vplot_name = "{library}" + "_CTCF_cohesin",
        flags = "-r 500 -f 3 -F 4 -F 8 -q 30",
        motif = ("/lab/work/albanus/ctcf_multiple_samples/bnMapper/"
                 "triple_conserved_CTCF_known2_ctcf_rad21_hg19.bed")
    resources:
        io_limit = 1
    shell:
        """
        ionice -c2 -n7 measure_signal -p {threads} {params.flags} {input} \
            {params.motif} | gzip -c > {output.vsignal}
        Rscript ~albanus/scripts/makeVplots.R -f {output.vsignal} \
        -o {params.handle} -n {params.vplot_name} --ylim 1.5 --split
        """

##
# debug info
##

rule versions:
    output:
        fastqc_version = os.path.join(VERSION_DIR, 'fastqc_version.txt'),
        cta_version = os.path.join(VERSION_DIR, 'cta_version.txt'),
        bwa_version = os.path.join(VERSION_DIR, 'bwa_version.txt'),
        picard_version = os.path.join(VERSION_DIR, 'picard_version.txt'),
        samtools_version = os.path.join(VERSION_DIR, 'samtools_version.txt'),
        macs2_version = os.path.join(VERSION_DIR, 'macs2_version.txt'),
        bedtools_version = os.path.join(VERSION_DIR, 'bedtools_version.txt'),
        ataqv_version = os.path.join(VERSION_DIR, 'ataqv_version.txt')
    run:
        shell('fastqc --version &> {output.fastqc_version} || echo ""')
        shell('cta --version &> {output.cta_version} || echo ""')
        shell('bwa &> {output.bwa_version} || echo ""')
        shell(
            ('picard MarkDuplicates --version &> {output.picard_version} || '
             'echo ""')
        )
        shell('samtools --version &> {output.samtools_version} || echo ""')
        shell('macs2 --version &> {output.macs2_version} || echo ""')
        shell('bedtools --version &> {output.bedtools_version} || echo ""')
        shell('ataqv --version &> {output.ataqv_version} || echo ""')

##
# notification
##

onerror:
    print("Error: Snakemake aborted!")
    shell(
        ("mail -s 'Snakemake Job Error: See log inside!' "
         "{config[email]} < {log}")
    )


onsuccess:
    print("Success: Snakemake completed!")
    shell(
        ("mail -s 'Snakemake Job Completed: Have a Beer!' "
         "{config[email]} < {log}")
    )

# vim: ft=snakemake
