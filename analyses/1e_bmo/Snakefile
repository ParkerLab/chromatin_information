#! /usr/bin/env python
#
# The Parker Lab (theparkerlab.org)
# University of Michigan, Ann Arbor
#

import math

from os.path import join


def get_motifs():
    """List all motifs"""
    for motif in open(config["motif_file"], 'r').readlines():
        yield motif.strip()


def get_samples():
    """List all samples"""
    for sample in sorted(config["samples"].keys()):
        yield sample


def bam_from_sample(sample):
    """Return the bam file associated with a sample"""
    bamfile = config["samples"][sample]["bamfile"]
    return bamfile


def subsampled_bam_from_sample(sample):
    """Return subsampling depths and fractions for a sample"""
    depth = config["samples"][sample]["depth"] / 10**6
    sub_depths = [5, 10]
    while sub_depths[-1] + 10 < depth:
        sub_depths.append(sub_depths[-1] + 10)
    sub_depths.append(math.floor(depth))
    bam_names = [join(
        BAM_SUB_DIR, "{}.{}M.bam"
    ).format(sample, x) for x in sub_depths]
    return bam_names


def subsampled_depths_from_sample(sample):
    """Return subsampling depths and fractions for a sample"""
    depth = config["samples"][sample]["depth"] / 10**6
    sub_depths = [5, 10]
    while sub_depths[-1] + 10 < depth:
        sub_depths.append(sub_depths[-1] + 10)
    sub_depths.append(math.floor(depth))
    return sub_depths
    # return [max(sub_depths)]  # only highest depth


def subsampled_bam_names_from_depth(sample, sub_depth):
    """Return subsampling depths and fractions for a sample"""
    bam_name = join(
        BAM_SUB_DIR, "{}.{}M.bam".format(sample, int(sub_depth))
    )
    return bam_name


def subsampled_bam_fraction_from_depth(sample, sub_depth):
    """Return subsampling depths and fractions for a sample"""
    depth = config["samples"][sample]["depth"] / 10**6
    fraction = sub_depth / depth
    return fraction


def get_piq_handle(motif):
    handle = motif_handle_dic[motif]
    return handle


def get_motif_index(motif):
    index = motif_dic[motif]
    return index


# Data
MOTIF_DIR = config["motif_dir"]
TP_dir = config["bound_motifs"]

# Path generator function


# Target directories (relative to root)
RESULTS = config["results"]
BAM_SUB_DIR = join(RESULTS, "bam_subsampled")
MACS2_SUB_DIR = join(RESULTS, "macs2_subsampled")
BMO_DIR = join(RESULTS, "bmo")
CENTI_DIR = join(RESULTS, "centipede")
CENTI_SB_DIR = join(RESULTS, "centipede_singlebin")
D2TF_DIR = join(RESULTS, "dnase2tf")
HINT_DIR = join(RESULTS, "hint")
PIQ_DIR = join(RESULTS, "piq")
PEAKS_DIR = join(RESULTS, "motifs_in_atac-seq_peaks")
PEAKS2_DIR = join(RESULTS, "motifs_in_atac-seq_peaks_scores")
CONCAT_DIR = join(RESULTS, "concatenated_files")
COMPARE_DIR = join(RESULTS, "comparisons")
ROC_DIR = join(RESULTS, "roc", "{sample}")
F1_DIR = join(RESULTS, "f1", "{sample}")

# Logs
LOG_DIR = join(RESULTS, "logs")
VERSION_DIR = join(RESULTS, "versions")

# Subsample dictionary -
# will be used to determine the output files for each sample
subsample_depths = {x: subsampled_depths_from_sample(x) for x in get_samples()}


rule all:
    input:
        # Downsampled BAM files
        [expand(
            join(BAM_SUB_DIR, "{sample}.{depth}M.bam"),
            sample=sample, depth=depths
        ) for sample, depths in subsample_depths.items()],
        # Peak calls
        [expand(
            join(MACS2_SUB_DIR,
                 "{sample}.{depth}_peaks.broadPeak.fdr0.05.noblacklist"),
            sample=sample, depth=depths
        ) for sample, depths in subsample_depths.items()],

        # HINT
        [expand(
            join(
                HINT_DIR,
                "{sample}/motif_intersections/{motif}.{depth}.bed"
            ),
            sample=sample,
            depth=depths,
            motif=get_motifs()
        ) for sample, depths in subsample_depths.items()],

        # DNase2TF
        [expand(
            join(
                D2TF_DIR,
                "{sample}/motif_intersections/{motif}.{depth}.bed"
            ),
            sample=sample,
            depth=depths,
            motif=get_motifs()
        ) for sample, depths in subsample_depths.items()],

        # CENTIPEDE
        [expand(
            join(
                CENTI_DIR, "{sample}/posteriors/{motif}.{depth}.bed.gz"
            ),
            sample=sample,
            depth=depths,
            motif=get_motifs()
        ) for sample, depths in subsample_depths.items()],
        # CENTIPEDE single-bin
        [expand(
            join(
                CENTI_SB_DIR, "{sample}/posteriors/{motif}.{depth}.bed.gz"
            ),
            sample=sample,
            depth=depths,
            motif=get_motifs()
        ) for sample, depths in subsample_depths.items()],
        # BMO
        [expand(
            join(
                BMO_DIR, "{sample}", "bound", "{motif}.{depth}.bound.bed"
            ),
            sample=sample,
            depth=depths,
            motif=get_motifs()
        ) for sample, depths in subsample_depths.items()],
        # PIQ - binarized files
        [expand(
            os.path.join(
                PIQ_DIR,
                "processed_output_binary", "{sample}", "{depth}M.{motif}.bed"
            ),
            sample=sample,
            depth=depths,
            motif=get_motifs()
        ) for sample, depths in subsample_depths.items()],
        # PIQ - scores files
        [expand(
            os.path.join(
                PIQ_DIR,
                "processed_output_scores", "{sample}", "{depth}M.{motif}.bed"
            ),
            sample=sample,
            depth=depths,
            motif=get_motifs()
        ) for sample, depths in subsample_depths.items()],

        # Motifs in peaks (binary)
        [expand(
            join(PEAKS_DIR, "{sample}", "{motif}.{depth}.bed"),
            sample=sample,
            depth=depths,
            motif=get_motifs()
        ) for sample, depths in subsample_depths.items()],

        # Motifs in peaks (with -log10 pval)
        [expand(
            join(PEAKS2_DIR, "{sample}", "{motif}.{depth}.bed"),
            sample=sample,
            depth=depths,
            motif=get_motifs()
        ) for sample, depths in subsample_depths.items()],

rule all_evaluate:
    input:
        [expand(
            join(CONCAT_DIR, "{sample}/{motif}.{depth}.bed"),
            sample=sample,
            depth=depths, motif=get_motifs()
        ) for sample, depths in subsample_depths.items()],

        expand(join(F1_DIR, "get_f1.ok"), sample=get_samples()),
        expand(join(ROC_DIR, "get_roc.ok"), sample=get_samples()),


rule all_aggregate:
    input:
        expand(join(ROC_DIR, "prauc_data.txt"), sample=get_samples()),
        expand(join(ROC_DIR, "roc_data.txt"), sample=get_samples()),
        expand(join(F1_DIR, "f1_data.txt"), sample=get_samples())


# Downsample BAM files and call peaks
include: "rules/tf-binding_subsample.smk"

# Run TF-binding prediction methods
include: "rules/tf-binding_hint.smk"
include: "rules/tf-binding_dnase2tf.smk"
include: "rules/tf-binding_centipede.smk"
include: "rules/tf-binding_bmo.smk"
include: "rules/tf-binding_centipede_singlebin.smk"
include: "rules/tf-binding_piq.smk" 

# # Compare methods
include: "rules/tf-binding_evaluate.smk"
